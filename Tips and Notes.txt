
-------------------------------------------------------------------------------------------------------------------
********************** Videos guia o ayudas online**********************************************************************
-------------------------------------------------------------------------------------------------------------------------------

***** parte del menu y pagina inicial *********************
- Fernando y app de Heroes
- para crear variables de css en react me ayudo este video: https://www.youtube.com/watch?v=LHQd4enUM2Q&t=3s
- Para entender lo que la clase se pone active o no, este video fue de ayuda: https://www.youtube.com/watch?v=UyHHmPvVEfI
- Ejemplo de cambiar un toggle pero solo en JS (no me guie): https://www.youtube.com/watch?v=ZNwato8j_48
- Este video muestra como hacer smooth Scroll al menu pero sin usar un paquete externo (muy bien explicado): https://www.youtube.com/watch?v=oszUqCqTGHo
- Este video muestra como hacer smooth Scroll al menu pero usa un paquete externo: https://www.youtube.com/watch?v=JBbFbkXdtQo
- Scroll presionando el boton en react: https://www.youtube.com/watch?v=-Xjwe4IwTMM
- En busqueda de como imitar la opcion: classList.toggle('aqui va la clase a remover o colocar'); en react es un poco differente
  Asi que encontre esete video que muestra como colocar o quitar alguna clase de css desde javascript en ReactJs(si me guie): https://www.youtube.com/watch?v=xysDXNYWbKw
- De este video de Online tutorial salio la idea del scroll page: https://www.youtube.com/watch?v=RakiGlEkvMg
- Aunque la idea del scroll page salio de Online tutorial, tuve dificultades y para la parte inicial de la pagina tome la guia de este video: https://www.youtube.com/watch?v=GdrbE-s5DgQ 
- El diseno del login salio de aqui: https://www.youtube.com/watch?v=mW0Z1T8l7sU
- Libreria de React, seccion de como manejar los Input y sus bug en React: https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable

***** Parte del slider a pantalla completa *********************
- slider a pantalla completa de Online Tuttorials (si me guie)  https://www.youtube.com/watch?v=HNvcg3i1i9M&t=48s
- sin embargo tuve algunas dificulates con el video de arriba sobre los botones checkbox y radio y  manejar su estado, en cuanto a manejarlo en react asi que tuve que buscar videos como los de abajo:
- radio button: https://www.youtube.com/watch?v=5TPdD0CNfZg
- checkbox button: https://www.youtube.com/watch?v=ewC42fwEYPI

********** Modal y Stripe ***********************************************
- creacionde modal con boostrap en React: https://www.youtube.com/watch?v=5YN2iWe1KI4
- video Stripe Fazt Code: https://www.youtube.com/watch?v=4Ib6rxx2BUk

********** Login ***********************************************
 El diseno del login salio de aqui: https://www.youtube.com/watch?v=mW0Z1T8l7sU


********** Slider Section ***********************************************
- Slider con Swiper y React(Este lo use y funciono, solo me toco seguir una parte un video de Online tutorial con Swiper): https://www.youtube.com/watch?v=OtqxDT0IlHI
- Slider con Swiper (Online Tutorials): https://www.youtube.com/watch?v=kX6MLRc_Qmg&t=70s

--------------------------------------------------------------------------
********************** Links guia*****************************
--------------------------------------------------------------------------

- Link de un Navbar ya listo por Fernando: https://gist.github.com/Klerith/566b484ac6fe46c8fa949e61df671a18




--------------------------------------------------------------------------
**********************  FRONTEND APP INIT STEPS *****************************
--------------------------------------------------------------------------
- yarn create vite
- yarn intall .........para colocar las dependencias
- yarn dev    ... para correr la app
- yarn add react-router-dom@6 bootswatch
- creamos las carpetas como: auth, router, dashboard,

--------------------------------------------------------------------------


- npx create-react-app frontend
- npx create-react-app frontend --typescript     //si queremos que se cree un proyecto con typescript
- npm i react-router-dom bootswatch


--------------------------------------------------------------------------
********************** Importaciones*****************************
--------------------------------------------------------------------------

const { Routes } = require("react-router-dom");
import { Routes, Route, Navigate } from "react-router-dom";        ...... uso en el router o routers
import { Link, NavLink, useNavigate } from "react-router-dom";   ... se utiliza para el Navbar component;   const navigate = useNavigate();
import { useParams } from "react-router-dom";

--------------------------------------------------------------------------
********************** Importaciones en el html*****************************
--------------------------------------------------------------------------
-     <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />
-     <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

--------------------------------------------------------------------------
**********************  Guia to manipulate time*****************************
--------------------------------------------------------------------------
- Como obtener los milisegundos:

let now = mew Date()
console.log(now.getTime())   // Aqui obtienes los milisegundos del tiempo presente



--------------------------------------------------------------------------
**********************  PASOS PARA HACER FRONTEND APP *****************************
--------------------------------------------------------------------------

- Comenzamos haciendo las intalaciones anteriores sea con yarn o con npx
- Pasamos a crear las rutas del router con el componente: <Routes><Route></Route></Routes>. Recordar colocar en el anterior componenete el <BrowserRouter>
- creamos el Navbar
- 






--------------------------------------------------------------------------
**********************  TIPS POR RECORDAR *****************************
--------------------------------------------------------------------------
- Funcion que ayuda a la navegacion de la pagina que queramos, en este caso queremos navegar a la ruta login

  const navigate = useNavigate();

  const onLogout = () => {
    navigate("/login", {
      replace: true, // Esta parte evite que si se quiere devolver a la pagina, esto lo evita
    });

- USUALMENTE TENGO PROBLEMAS CON EL RENDER EN REACT:
  una opcion que me recordo pacho es que se puede verificar todo un Html, de esta forma(asi se soluciono una gran atorada que tenia):
          {img && (
          <Link to="#" /* onClick={() => handleSuma()} */>{img[0]?.name}</Link>
        )}


/////////////////////////**********************///////////***********************////////////////////////////////
- Script para poder tomar la informacion de un input en el front (cualquier dato), hacerle submit y guardarlo en un estado:

const VideoForm = () => {

   const initialState = { title: "", description: "", url: "" };
  const [video, setVideo] = useState(initialState);

  const handleInputChange = (e) => {
    setVideo({ ...video, [e.target.name]: e.target.value });
  };

  const handleSubmit = async(e) => {
    e.preventDefault();
    const res = await videoService.createVideo(video);
    console.log(res);
    setVideo(initialState);
  };

/////////////////////////**********************///////////***********************////////////////////////////////
- El request de axios o fetch siempre tiene sus complicaciones, uno que tuve fue el como enviar el token desde el header hacia el backend, finalmente pude y de ayuda fue el siguiente video:
- https://www.youtube.com/watch?v=xjWwnqMn-b0
- Esta siguinete parte es en el Front:
export const postCategorysService = async (data, token) => {
  return await axios.post(`${API}/category`, data, {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
  });
};
- Sin embargo en el backend tenia que hacer un split a la informacion que llegaba 
- Esta siguinete parte es en el Front:
app.use(
  express.urlencoded({ extended: false, limit: 10000, parameterLimit: 2 })
);

    const tokenFromFront = req.headers.authorization;
    const tokenSplit = tokenFromFront.split(" ");
    const token = tokenSplit[1];


/////////////////////////**********************///////////***********************////////////////////////////////
-------------------------------------------------------------------------------------

- react-router-dom tiene 3 formas para hacer una navegacion, sin embargo se usan en diferentes momentos:
  import {Navigate, Link, useNavigate} from 'react-router-dom'

  Navigate: este es un componente react y siempre veo que se usa cuando no se tiene interaccion como un boton, sino para que sencillamente navegue, como en el router
		        <Route path="/" element={<Navigate to="/marvel" />} />  

  Link: Este es un componente de React y se puede usar como boton para redireccionar.
			<Link to={`/hero/${id}`}>mass...</Link>

  useNavigate: Este se usa para crear funciones que puedan interactuar en el onClick por ejemplo de un boton.
  const LoginPage = () => {
  const navigate = useNavigate();
  const onLogin = () => {
    navigate("/", {
      replace: true,
    });
    navigate(-1); //Esto devuelve a la persona a la pagina anterior
  };

-------------------------------------------------------------------------------------------

- La clase 'active' se coloca automaticamente en <a> cuando el navegador ya ha navegado al link que le colocamos:
  En el siguiente ejemplo hasta que ya hemos viajado hasta to="/product/dashboard", se coloca en este <a> en el className:active
            <NavLink
              className={({ isActive }) =>
                `nav-item nav-link ${isActive ? "active" : ""}`
              }
              style={{ "--clr": "#c56cf0" }}
              to="/product/dashboard"
            >
              Dashboard
            </NavLink>

  luego podemos colocar una logica asi, automatizando sus css properties dependiendo si esta activo o no:
import {NavLink} from 'react-router-dom'
export const Navbar = ()=>{
const navLinkStyles = ({isActive})=>{
return {
 fontWeight: isActive? 'bold' : "normal",
 textDecoration: isActive? 'none' : "underline"
 }
} 

return (
<nav>
  <NavLink style={navLinkStyles} to='/'> Home </NavLink>
  <NavLink style={navLinkStyles} to='/about'> About </NavLink>
</nav>
 )
}
Este ejemplo salio de esta explicacion: https://www.youtube.com/watch?v=UyHHmPvVEfI

--------------------------------------------------------------------------
**********************  Carrito de compras *****************************
--------------------------------------------------------------------------
- Su logica es bastante compleja sin embargo, de la aplicaion de janmovies, quedo bastante bien 
  solo basta con recordar que el estado del carro, tenemos que mandar todo el producto como se guarda 
  en Mongo y verificar que esten llegando todas las caracteristicas como:

        const data = {
          name: selectedProduct.name,
          price: selectedProduct.price,
          discount: selectedProduct.discount,
          idStripe: selectedProduct.idStripe,
      };

- La parte de pagos se efectua mas en el backend, en el fornt solo se hace un peticion POST a nuestra API



--------------------------------------------------------------------------
**********************  Tips about Hooks *****************************
--------------------------------------------------------------------------

- useMemo: sirve para memorizar valores. Con esto si el mismo componente o un padre se redibuja, no tiene que volver a cambiar este valor.
  el useMemo es una funcion que dispara un callback cada vez que sus dependencias cambien. En el siguiente ejemplo las dependencias seria id:
      const hero = useMemo(() => getHeroeById(id), [id]);

- UseCallback: sirve para memorizar funciones

-----------------------------------------------------------------------------------------------
**********************  Dificultades de Realizar este Eccomerce*****************************
-------------------------------------------------------------------------------------------------
- la convinacion de las variantes ha sido un reto, hay que pensar como minimo en que los productos manejan
  dos variantes o mas, es decir tamano X color verde.

-----------------------------------------------------------------------------------------------
**********************  Cosas que quedan pendientes: deuda tecnica *****************************
-------------------------------------------------------------------------------------------------
- terminar el user y admin role como guardar en database
- Cambiar ciertos logs de respuesta
- En la parte del producto no he podido colocar la primera img por defecto, asi que segui colocando un string
  pero quiero que sea automatico
- quiero que apenas se seleccione una variante y un prodcuto, aparezca el precio de este en el boton, sin embargo 
  no lo he conseguido sin hacer click en el boton.
- En el Login me di cuenta que si se coloca en email correcto pero elpassword no, aun asi manda a la pagina de control...toca hacer que verifique primero para que haga el redireccionamiento



Hello, I would like to inquire if it is possible to obtain information regarding the costs or packages available.
What is the price for entry?
Do you offer any packages that include entry, equipment, and either 500 or 1000 balls?
How long does a game typically last?
Is an initial payment required for booking?
Thank you.





